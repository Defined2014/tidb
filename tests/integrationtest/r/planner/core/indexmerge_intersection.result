drop table if exists t;
create table t(a int, b int, c int, d int, e int, index ia(a), index ib(b), index ic(c), index id(d), index ie(e));
explain select * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100);
id	estRows	task	access object	operator info
IndexLookUp_11	0.00	root		
├─IndexRangeScan_8(Build)	10.00	cop[tikv]	table:t, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
└─Selection_10(Probe)	0.00	cop[tikv]		eq(planner__core__indexmerge_intersection.t.b, 20), gt(planner__core__indexmerge_intersection.t.c, 30), in(planner__core__indexmerge_intersection.t.e, 0, 100), isnull(planner__core__indexmerge_intersection.t.d)
  └─TableRowIDScan_9	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain select /*+ use_index_merge(t, ia, ib, ic, id, ie) */ * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100);
id	estRows	task	access object	operator info
IndexMerge_11	0.00	root		type: intersection
├─IndexRangeScan_5(Build)	10.00	cop[tikv]	table:t, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
├─IndexRangeScan_6(Build)	10.00	cop[tikv]	table:t, index:ib(b)	range:[20,20], keep order:false, stats:pseudo
├─IndexRangeScan_7(Build)	3333.33	cop[tikv]	table:t, index:ic(c)	range:(30,+inf], keep order:false, stats:pseudo
├─IndexRangeScan_8(Build)	10.00	cop[tikv]	table:t, index:id(d)	range:[NULL,NULL], keep order:false, stats:pseudo
├─IndexRangeScan_9(Build)	20.00	cop[tikv]	table:t, index:ie(e)	range:[0,0], [100,100], keep order:false, stats:pseudo
└─TableRowIDScan_10(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
create global binding for
select * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100)
using
select /*+ use_index_merge(t, ia, ib, ic, id, ie) */ * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100);
explain select * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100);
id	estRows	task	access object	operator info
IndexMerge_11	0.00	root		type: intersection
├─IndexRangeScan_5(Build)	10.00	cop[tikv]	table:t, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
├─IndexRangeScan_6(Build)	10.00	cop[tikv]	table:t, index:ib(b)	range:[20,20], keep order:false, stats:pseudo
├─IndexRangeScan_7(Build)	3333.33	cop[tikv]	table:t, index:ic(c)	range:(30,+inf], keep order:false, stats:pseudo
├─IndexRangeScan_8(Build)	10.00	cop[tikv]	table:t, index:id(d)	range:[NULL,NULL], keep order:false, stats:pseudo
├─IndexRangeScan_9(Build)	20.00	cop[tikv]	table:t, index:ie(e)	range:[0,0], [100,100], keep order:false, stats:pseudo
└─TableRowIDScan_10(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop global binding for select * from t where a = 10 and b = 20 and c > 30 and d is null and e in (0, 100);
drop table if exists t, t1, t2, t3, t4, t5, t6, t7, t8;
drop view if exists v, v1, vh;
create table t1(a int, b int, c int, d int, e int, index ia(a), index ibc(b, c),index ic(c), index id(d), index ie(e))partition by range(c) (partition p0 values less than (10),partition p1 values less than (20),partition p2 values less than (30),partition p3 values less than (maxvalue));
insert into t1 values (10, 20, 5, 5, 3), (20, 20, 50, 5, 200), (20, 20, 10, 5, 5), (10, 30, 5, 3, 1);
create definer='root'@'localhost' view vh as select /*+ use_index_merge(t1, ia, ibc, id) */ * from t1 where a = 10 and b = 20 and c < 30 and d in (2,5);
create definer='root'@'localhost' view v as select * from t1 where a = 10 and b = 20 and c < 30 and d in (2,5);
create definer='root'@'localhost' view v1 as select * from t1 where a = 10 and b = 20;
create table t2(a int, b int, c int, d int, e int, index ia(a), index ibc(b, c), index id(d), index ie(e))partition by range columns (c, d) (partition p0 values less than (10, 20),partition p1 values less than (30, 40),partition p2 values less than (50, 60),partition p3 values less than (maxvalue, maxvalue));
insert into t2 values (10, 20, 5, 5, 3), (20, 20, 20, 5, 100), (100, 30, 5, 3, 100);
create table t3(a int, b int, c int, d int, e int, index ia(a), index ibc(b, c), index id(d), index ie(e))partition by hash (e) partitions 5;
insert into t3 values (10, 20, 5, 5, 3), (20, 20, 20, 5, 100), (10, 30, 5, 3, 100);
create table t4(a int, b int, c int, d int, e int, index ia(a), index ibc(b, c), index id(d), index ie(e))partition by list (d) (partition p0 values in (1,2,3,4,5),partition p1 values in (6,7,8,9,10),partition p2 values in (11,12,13,14,15),partition p3 values in (16,17,18,19,20));
insert into t4 values (30, 20, 5, 8, 100), (20, 20, 20, 3, 2), (10, 30, 5, 3, 100);
create table t5(s1 varchar(20) collate utf8mb4_bin,s2 varchar(30) collate ascii_bin,s3 varchar(50) collate utf8_unicode_ci,s4 varchar(20) collate gbk_chinese_ci,index is1(s1), index is2(s2), index is3(s3), index is4(s4));
insert into t5 values ('Abc', 'zzzz', 'aa', 'ccc'), ('abc', 'zzzz', 'CCC', 'ccc');
create table t6(s1 varchar(20) collate utf8mb4_bin,s2 varchar(30) collate ascii_bin,s3 varchar(50) collate utf8_unicode_ci,s4 varchar(20) collate gbk_chinese_ci,primary key (s1, s2(10)) nonclustered,index is1(s1), index is2(s2), index is3(s3), index is4(s4));
insert into t6 values ('Abc', 'zzzz', 'A啊A', 'Cdaa'), ('Abc', 'zczz', 'A啊', 'Cda');
create table t7(a tinyint unsigned,b bit(3),c float,d decimal(10,3),e datetime,f timestamp(5),g year,primary key (d) nonclustered,index ia(a), unique index ib(b), index ic(c), index ie(e), index iff(f), index ig(g));
insert into t7 values (100, 6, 12.2, 56, '2022-11-22 17:00', '2022-12-21 00:00', 2021),(20, 7, 12.4, 30, '2022-12-22 17:00', '2016-12-21 00:00', 2021);
create table t8(s1 mediumtext collate utf8mb4_general_ci,s2 varbinary(20),s3 tinyblob,s4 enum('测试', 'aA', '??') collate gbk_chinese_ci,s5 set('^^^', 'tEsT', '2') collate utf8_general_ci,primary key (s1(10)) nonclustered,unique index is2(s2(20)), index is3(s3(20)), index is4(s4), index is5(s5));
insert into t8 values('啊aabbccdd', 'abcc', 'cccc', 'aa', '2,test'),('啊aabb', 'abcdc', 'aaaa', '??', '2');
set @@tidb_partition_prune_mode = 'dynamic';
analyze table t1,t2,t3,t4;
set @@tidb_partition_prune_mode = 'dynamic';
explain format = 'brief' select * from vh;
id	estRows	task	access object	operator info
IndexMerge	0.97	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, index:ia(a)	range:[10,10], keep order:false
├─IndexRangeScan(Build)	2.60	cop[tikv]	table:t1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t1, index:id(d)	range:[2,2], [5,5], keep order:false
└─TableRowIDScan(Probe)	0.97	cop[tikv]	table:t1	keep order:false
select * from vh;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
IndexMerge	0.97	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, index:ia(a)	range:[10,10], keep order:false
├─IndexRangeScan(Build)	2.60	cop[tikv]	table:t1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t1, index:id(d)	range:[2,2], [5,5], keep order:false
└─TableRowIDScan(Probe)	0.97	cop[tikv]	table:t1	keep order:false
select /*+ qb_name(v, v), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
IndexMerge	0.97	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, index:ia(a)	range:[10,10], keep order:false
├─IndexRangeScan(Build)	2.60	cop[tikv]	table:t1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t1, index:id(d)	range:[2,2], [5,5], keep order:false
└─TableRowIDScan(Probe)	0.97	cop[tikv]	table:t1	keep order:false
select /*+ qb_name(v, v@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
IndexMerge	0.97	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, index:ia(a)	range:[10,10], keep order:false
├─IndexRangeScan(Build)	2.60	cop[tikv]	table:t1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t1, index:id(d)	range:[2,2], [5,5], keep order:false
└─TableRowIDScan(Probe)	0.97	cop[tikv]	table:t1	keep order:false
select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v1@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v1 where c < 30 and d in (2,5);
id	estRows	task	access object	operator info
IndexMerge	0.97	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, index:ia(a)	range:[10,10], keep order:false
├─IndexRangeScan(Build)	2.60	cop[tikv]	table:t1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t1, index:id(d)	range:[2,2], [5,5], keep order:false
└─TableRowIDScan(Probe)	0.97	cop[tikv]	table:t1	keep order:false
select /*+ qb_name(v, v1@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v1 where c < 30 and d in (2,5);
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ use_index_merge(t2, ia, ibc, id, ie) */ * from t2 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
id	estRows	task	access object	operator info
IndexMerge	0.89	root	partition:p0,p1,p2	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t2, index:ia(a)	range:(10,+inf], keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t2, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t2, index:id(d)	range:[-inf,45), keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t2, index:ie(e)	range:[100,100], keep order:false
└─TableRowIDScan(Probe)	0.89	cop[tikv]	table:t2	keep order:false
select /*+ use_index_merge(t2, ia, ibc, id, ie) */ * from t2 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
a	b	c	d	e
20	20	20	5	100
explain format = 'brief' select /*+ use_index_merge(t3, ia, ibc, id, ie) */ * from t3 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
id	estRows	task	access object	operator info
IndexMerge	0.44	root	partition:p0	type: intersection
├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t3, index:ia(a)	range:(10,+inf], keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t3, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t3, index:id(d)	range:[-inf,45), keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t3, index:ie(e)	range:[100,100], keep order:false
└─TableRowIDScan(Probe)	0.44	cop[tikv]	table:t3	keep order:false
select /*+ use_index_merge(t3, ia, ibc, id, ie) */ * from t3 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
a	b	c	d	e
20	20	20	5	100
explain format = 'brief' select /*+ use_index_merge(t4, ia, ibc, id, ie) */ * from t4 where a > 10 and b = 20 and c < 35 and d in (1,3,8,9) and e = 100;
id	estRows	task	access object	operator info
IndexMerge	0.89	root	partition:p0,p1	type: intersection
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t4, index:ia(a)	range:(10,+inf], keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t4, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
├─IndexRangeScan(Build)	3.00	cop[tikv]	table:t4, index:id(d)	range:[1,1], [3,3], [8,8], [9,9], keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t4, index:ie(e)	range:[100,100], keep order:false
└─TableRowIDScan(Probe)	0.89	cop[tikv]	table:t4	keep order:false
select /*+ use_index_merge(t4, ia, ibc, id, ie) */ * from t4 where a > 10 and b = 20 and c < 35 and d in (1,3,8,9) and e = 100;
a	b	c	d	e
30	20	5	8	100
explain format = 'brief' select /*+ use_index_merge(t5, is1, is2, is3, is4) */ * from t5 where s1 = 'Abc' and s2 > 'zzz' and s3 < 'B啊a' and s4 = 'CcC';
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t5, index:is1(s1)	range:["Abc","Abc"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t5, index:is2(s2)	range:("zzz",+inf], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3323.33	cop[tikv]	table:t5, index:is3(s3)	range:[-inf,"\x0eJ\xfb@\xd5J\x0e3"), keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t5, index:is4(s4)	range:["CCC","CCC"], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t5	keep order:false, stats:pseudo
select /*+ use_index_merge(t5, is1, is2, is3, is4) */ * from t5 where s1 = 'Abc' and s2 > 'zzz' and s3 < 'B啊a' and s4 = 'CcC';
s1	s2	s3	s4
Abc	zzzz	aa	ccc
explain format = 'brief' select /*+ use_index_merge(t6, primary, is3, is4) */ * from t6 where s1 = 'Abc' and s2 > 'zzz' and s3 = 'A啊a' and s4 not like 'Cd_';
id	estRows	task	access object	operator info
IndexMerge	0.03	root		type: intersection
├─IndexRangeScan(Build)	33.33	cop[tikv]	table:t6, index:PRIMARY(s1, s2)	range:("Abc" "zzz","Abc" +inf], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t6, index:is3(s3)	range:["\x0e3\xfb@\xd5J\x0e3","\x0e3\xfb@\xd5J\x0e3"], keep order:false, stats:pseudo
└─Selection(Probe)	0.03	cop[tikv]		gt(planner__core__indexmerge_intersection.t6.s2, "zzz"), not(like(planner__core__indexmerge_intersection.t6.s4, "Cd_", 92))
  └─TableRowIDScan	0.03	cop[tikv]	table:t6	keep order:false, stats:pseudo
select /*+ use_index_merge(t6, primary, is3, is4) */ * from t6 where s1 = 'Abc' and s2 > 'zzz' and s3 = 'A啊a' and s4 not like 'Cd_';
s1	s2	s3	s4
Abc	zzzz	A啊A	Cdaa
explain format = 'brief' select /*+ use_index_merge(t7, primary,ia,ib,ic,ie,iff,ig) */ * from t7 where a = 100 and b > 5 and c < 12.3 and d > 54.321 and e = '2022-11-22 17:00' and f > '2020-6-23 10:00' and g < 2025;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t7, index:PRIMARY(d)	range:(54.321,+inf], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t7, index:ia(a)	range:[100,100], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t7, index:ib(b)	range:("0x05",+inf], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3323.33	cop[tikv]	table:t7, index:ic(c)	range:[-inf,12.3), keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t7, index:ie(e)	range:[2022-11-22 17:00:00,2022-11-22 17:00:00], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t7, index:iff(f)	range:(2020-06-23 10:00:00.00000,+inf], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	3323.33	cop[tikv]	table:t7, index:ig(g)	range:[-inf,2025), keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t7	keep order:false, stats:pseudo
select /*+ use_index_merge(t7, primary,ia,ib,ic,ie,iff,ig) */ * from t7 where a = 100 and b > 5 and c < 12.3 and d > 54.321 and e = '2022-11-22 17:00' and f > '2020-6-23 10:00' and g < 2025;
a	b	c	d	e	f	g
100		12.2	56.000	2022-11-22 17:00:00	2022-12-21 00:00:00.00000	2021
explain format = 'brief' select /*+ use_index_merge(t8, primary,is2,is3,is4,is5) */ * from t8 where s1 like '啊A%' and s2 > 'abc' and s3 > 'cba' and s4 in ('aA', '??') and s5 = 'test,2';
id	estRows	task	access object	operator info
Selection	0.04	root		eq(planner__core__indexmerge_intersection.t8.s5, "test,2")
└─IndexMerge	0.06	root		type: intersection
  ├─IndexRangeScan(Build)	250.00	cop[tikv]	table:t8, index:PRIMARY(s1)	range:["UJ\x00A","UJ\x00B"), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t8, index:is2(s2)	range:("abc",+inf], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t8, index:is3(s3)	range:("cba",+inf], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t8, index:is4(s4)	range:["aA","aA"], ["??","??"], keep order:false, stats:pseudo
  └─Selection(Probe)	0.06	cop[tikv]		gt(planner__core__indexmerge_intersection.t8.s3, "cba"), like(planner__core__indexmerge_intersection.t8.s1, "啊A%", 92)
    └─TableRowIDScan	0.06	cop[tikv]	table:t8	keep order:false, stats:pseudo
select /*+ use_index_merge(t8, primary,is2,is3,is4,is5) */ * from t8 where s1 like '啊A%' and s2 > 'abc' and s3 > 'cba' and s4 in ('aA', '??') and s5 = 'test,2';
s1	s2	s3	s4	s5
啊aabbccdd	abcc	cccc	aA	tEsT,2
explain format = 'brief' select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.c = t2.a) from t2;
id	estRows	task	access object	operator info
Projection	3.00	root		planner__core__indexmerge_intersection.t1.a
└─Apply	3.00	root		CARTESIAN left outer join
  ├─IndexReader(Build)	3.00	root	partition:all	index:IndexFullScan
  │ └─IndexFullScan	3.00	cop[tikv]	table:t2, index:ia(a)	keep order:false
  └─MaxOneRow(Probe)	3.00	root		
    └─IndexMerge	1.50	root	partition:all	type: intersection
      ├─IndexRangeScan(Build)	6.00	cop[tikv]	table:t1, index:ia(a)	range:(10,+inf], keep order:false
      ├─IndexRangeScan(Build)	4.00	cop[tikv]	table:t1, index:ibc(b, c)	range: decided by [eq(planner__core__indexmerge_intersection.t1.b, 20) eq(planner__core__indexmerge_intersection.t1.c, planner__core__indexmerge_intersection.t2.a)], keep order:false
      └─TableRowIDScan(Probe)	1.50	cop[tikv]	table:t1	keep order:false
select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.c = t2.a) from t2;
(select /*+ use_index_merge(t1,ia,ibc,ic)  a from t1 where t1.a > 10 and t1.b = 20 and t1.c = t2.a)
NULL
NULL
20
explain format = 'brief' select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.c > t2.a) from t2;
id	estRows	task	access object	operator info
Projection	3.00	root		planner__core__indexmerge_intersection.t1.a
└─Apply	3.00	root		CARTESIAN left outer join
  ├─IndexReader(Build)	3.00	root	partition:all	index:IndexFullScan
  │ └─IndexFullScan	3.00	cop[tikv]	table:t2, index:ia(a)	keep order:false
  └─MaxOneRow(Probe)	3.00	root		
    └─IndexMerge	3.60	root	partition:all	type: intersection
      ├─IndexRangeScan(Build)	6.00	cop[tikv]	table:t1, index:ia(a)	range:(10,+inf], keep order:false
      ├─Selection(Build)	7.20	cop[tikv]		gt(planner__core__indexmerge_intersection.t1.c, planner__core__indexmerge_intersection.t2.a)
      │ └─IndexRangeScan	9.00	cop[tikv]	table:t1, index:ibc(b, c)	range:[20,20], keep order:false
      └─TableRowIDScan(Probe)	3.60	cop[tikv]	table:t1	keep order:false
select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.c > t2.a) from t2;
(select /*+ use_index_merge(t1,ia,ibc,ic)  a from t1 where t1.a > 10 and t1.b = 20 and t1.c > t2.a)
NULL
20
20
explain format = 'brief' select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.e > t2.a) from t2;
id	estRows	task	access object	operator info
Projection	3.00	root		planner__core__indexmerge_intersection.t1.a
└─Apply	3.00	root		CARTESIAN left outer join
  ├─IndexReader(Build)	3.00	root	partition:all	index:IndexFullScan
  │ └─IndexFullScan	3.00	cop[tikv]	table:t2, index:ia(a)	keep order:false
  └─MaxOneRow(Probe)	3.00	root		
    └─IndexMerge	3.60	root	partition:all	type: intersection
      ├─IndexRangeScan(Build)	6.00	cop[tikv]	table:t1, index:ia(a)	range:(10,+inf], keep order:false
      ├─IndexRangeScan(Build)	9.00	cop[tikv]	table:t1, index:ibc(b, c)	range:[20,20], keep order:false
      └─Selection(Probe)	3.60	cop[tikv]		gt(planner__core__indexmerge_intersection.t1.e, planner__core__indexmerge_intersection.t2.a)
        └─TableRowIDScan	4.50	cop[tikv]	table:t1	keep order:false
select (select /*+ use_index_merge(t1,ia,ibc,ic) */ a from t1 where t1.a > 10 and t1.b = 20 and t1.e > t2.a) from t2;
(select /*+ use_index_merge(t1,ia,ibc,ic)  a from t1 where t1.a > 10 and t1.b = 20 and t1.e > t2.a)
20
20
20
set @@tidb_partition_prune_mode = 'static';
explain format = 'brief' select * from vh;
id	estRows	task	access object	operator info
PartitionUnion	0.50	root		
├─IndexMerge	0.50	root		type: intersection
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, partition:p0, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t1, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, partition:p2, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t1, partition:p2, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t1, partition:p2, index:id(d)	range:[2,2], [5,5], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t1, partition:p2	keep order:false, stats:pseudo
select * from vh;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
PartitionUnion	0.50	root		
├─IndexMerge	0.50	root		type: intersection
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, partition:p0, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t1, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, partition:p2, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t1, partition:p2, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t1, partition:p2, index:id(d)	range:[2,2], [5,5], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t1, partition:p2	keep order:false, stats:pseudo
select /*+ qb_name(v, v), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
PartitionUnion	0.50	root		
├─IndexMerge	0.50	root		type: intersection
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, partition:p0, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t1, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, partition:p2, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t1, partition:p2, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t1, partition:p2, index:id(d)	range:[2,2], [5,5], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t1, partition:p2	keep order:false, stats:pseudo
select /*+ qb_name(v, v@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
PartitionUnion	0.50	root		
├─IndexMerge	0.50	root		type: intersection
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, partition:p0, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t1, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, partition:p2, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t1, partition:p2, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t1, partition:p2, index:id(d)	range:[2,2], [5,5], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t1, partition:p2	keep order:false, stats:pseudo
select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
id	estRows	task	access object	operator info
PartitionUnion	0.50	root		
├─IndexMerge	0.50	root		type: intersection
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t1, partition:p0, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p0, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t1, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ia(a)	range:[10,10], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, partition:p1, index:id(d)	range:[2,2], [5,5], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, partition:p2, index:ia(a)	range:[10,10], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t1, partition:p2, index:ibc(b, c)	range:[20 -inf,20 30), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	20.00	cop[tikv]	table:t1, partition:p2, index:id(d)	range:[2,2], [5,5], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t1, partition:p2	keep order:false, stats:pseudo
select /*+ qb_name(v, v@sel_1 .@sel_1), use_index_merge(@v t1, ia, ibc, id) */ * from v;
a	b	c	d	e
10	20	5	5	3
explain format = 'brief' select /*+ use_index_merge(t2, ia, ibc, id, ie) */ * from t2 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
id	estRows	task	access object	operator info
PartitionUnion	1.25	root		
├─IndexMerge	0.25	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p0, index:ia(a)	range:(10,+inf], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p0, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t2, partition:p0, index:id(d)	range:[-inf,45), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p0, index:ie(e)	range:[100,100], keep order:false
│ └─TableRowIDScan(Probe)	0.25	cop[tikv]	table:t2, partition:p0	keep order:false
├─IndexMerge	1.00	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p1, index:ia(a)	range:(10,+inf], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p1, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p1, index:id(d)	range:[-inf,45), keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t2, partition:p1, index:ie(e)	range:[100,100], keep order:false
│ └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t2, partition:p1	keep order:false
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	3333.33	cop[tikv]	table:t2, partition:p2, index:ia(a)	range:(10,+inf], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	33.23	cop[tikv]	table:t2, partition:p2, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	3323.33	cop[tikv]	table:t2, partition:p2, index:id(d)	range:[-inf,45), keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t2, partition:p2, index:ie(e)	range:[100,100], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t2, partition:p2	keep order:false, stats:pseudo
select /*+ use_index_merge(t2, ia, ibc, id, ie) */ * from t2 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
a	b	c	d	e
20	20	20	5	100
explain format = 'brief' select /*+ use_index_merge(t3, ia, ibc, id, ie) */ * from t3 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
id	estRows	task	access object	operator info
IndexMerge	0.50	root		type: intersection
├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t3, partition:p0, index:ia(a)	range:(10,+inf], keep order:false
├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t3, partition:p0, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t3, partition:p0, index:id(d)	range:[-inf,45), keep order:false
├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t3, partition:p0, index:ie(e)	range:[100,100], keep order:false
└─TableRowIDScan(Probe)	0.50	cop[tikv]	table:t3, partition:p0	keep order:false
select /*+ use_index_merge(t3, ia, ibc, id, ie) */ * from t3 where a > 10 and b = 20 and c < 35 and d < 45 and e = 100;
a	b	c	d	e
20	20	20	5	100
explain format = 'brief' select /*+ use_index_merge(t4, ia, ibc, id, ie) */ * from t4 where a > 10 and b = 20 and c < 35 and d in (1,3,8,9) and e = 100;
id	estRows	task	access object	operator info
PartitionUnion	1.25	root		
├─IndexMerge	0.25	root		type: intersection
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p0, index:ia(a)	range:(10,+inf], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p0, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
│ ├─IndexRangeScan(Build)	2.00	cop[tikv]	table:t4, partition:p0, index:id(d)	range:[1,1], [3,3], [8,8], [9,9], keep order:false
│ ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p0, index:ie(e)	range:[100,100], keep order:false
│ └─TableRowIDScan(Probe)	0.25	cop[tikv]	table:t4, partition:p0	keep order:false
└─IndexMerge	1.00	root		type: intersection
  ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p1, index:ia(a)	range:(10,+inf], keep order:false
  ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p1, index:ibc(b, c)	range:[20 -inf,20 35), keep order:false
  ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p1, index:id(d)	range:[1,1], [3,3], [8,8], [9,9], keep order:false
  ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t4, partition:p1, index:ie(e)	range:[100,100], keep order:false
  └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t4, partition:p1	keep order:false
select /*+ use_index_merge(t4, ia, ibc, id, ie) */ * from t4 where a > 10 and b = 20 and c < 35 and d in (1,3,8,9) and e = 100;
a	b	c	d	e
30	20	5	8	100
set @@tidb_partition_prune_mode = default;
